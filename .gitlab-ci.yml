shellcheck:
  image: koalaman/shellcheck-alpine
  stage: .pre
  script:
    - "find . -name '*.sh' -type f -print0 | LC_ALL=C.UTF-8 xargs -n 1 -t -0 shellcheck"

docker-build-master:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

docker-build:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  except:
    - master

safety:
  image: 
    name: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    entrypoint: [""]
  stage: test
  script:
    - pip install safety
    - safety check
  allow_failure: true

test:
  stage: test
  image: docker
  services:
    - docker:dind
  variables:
    TEST_FILE: test.bin
    TEST_PATH: /s3ql/$TEST_FILE
    IMAGE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  script:
    # Create clean file system
    - docker run -e BACKEND_OPTIONS='domain=default' -e S3QL_USERNAME -e S3QL_PASSWORD -e S3QL_PROJECT -e S3QL_URL $IMAGE_TAG sh -c "echo yes|s3qladm clear $S3QL_URL"
    - docker run -e S3QL_AUTHFILE -v $S3QL_AUTHFILE:$S3QL_AUTHFILE $IMAGE_TAG mkfs.s3ql --plain --authfile $S3QL_AUTHFILE $S3QL_URL
    # Mount file system for the first time
    - docker run -d --name firstmount -e BACKEND_OPTIONS='domain=default' -e S3QL_USERNAME -e S3QL_PASSWORD -e S3QL_PROJECT -e S3QL_URL --cap-add SYS_ADMIN --device /dev/fuse --security-opt apparmor:unconfined $IMAGE_TAG
    - sleep 20
    - docker logs firstmount
    - test $(docker inspect -f {{.State.Running}} firstmount) = true
    # Write a file
    - dd if=/dev/random of=$TEST_FILE bs=1M count=1
    - TEST_HASH=$(sha1sum $TEST_FILE | awk '{print $1}')
    - docker cp $TEST_FILE firstmount:/
    - docker exec firstmount sh -c "mv $TEST_FILE $TEST_PATH"
    - docker exec firstmount sh -c "test -f $TEST_PATH"
    # Stop container and verify that file is not available anymore after unmounting
    - docker stop firstmount
    - docker logs firstmount
    - docker run -e BACKEND_OPTIONS='domain=default' -e S3QL_USERNAME -e S3QL_PASSWORD -e S3QL_PROJECT -e S3QL_URL $IMAGE_TAG sh -c "test ! -e $TEST_PATH"
    # Mount file system for the second time
    - docker run -d --name secondmount -e S3QL_AUTHFILE -v $S3QL_AUTHFILE:$S3QL_AUTHFILE --cap-add SYS_ADMIN --device /dev/fuse --security-opt apparmor:unconfined $IMAGE_TAG
    - sleep 20
    - docker logs secondmount
    - test $(docker inspect -f {{.State.Running}} secondmount) = true
    # Check that test file is there
    - docker exec secondmount sh -c "test -f $TEST_PATH"
    - docker exec secondmount sh -c "test \$(sha1sum $TEST_PATH | awk '{print \$1}') = $TEST_HASH"
    # Stop container again
    - docker stop secondmount
    - docker logs secondmount
